name: Test Project
on: push

jobs:
  test:
    name: Test Project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
      - name: Install project dependencies
        run: pnpm install
      - name: Create test file
        run: |
          cat > test.js <<'END_SCRIPT'
            import { exec } from 'node:child_process';
            import { promisify } from 'node:util';

            // Copiato da https://www.npmjs.com/package/strip-ansi
            function stripAnsi(string) {
              if (typeof string !== 'string') {
                throw new TypeError(`Expected a \`string\`, got \`${typeof string}\``);
              }
              return string.replace(/[\u001B\u009B][[\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\d\/#&.:=?%@~_]+)*|[a-zA-Z\d]+(?:;[-a-zA-Z\d\/#&.:=?%@~_]*)*)?(?:\u0007|\u001B\u005C|\u009C))|(?:(?:\d{1,4}(?:;\d{0,4})*)?[\dA-PR-TZcf-nq-uy=><~]))/g, '');
            }

            const execAsync = promisify(exec);

            const { stdout: stdoutNoArgs1 } = await execAsync('node index.js');

            const pattern =
              /^( *#{11,}\n){1,} *#{1,} +#{1,}\n *#{1,} +(#[A-Fa-f0-9]{6}) +#{1,}\n *#{1,} +#{1,}\n( *#{11,}\n){1,}/m;

            // Ottieni il colore esadecimale dall'output
            const matchNoArgs1 = stripAnsi(stdoutNoArgs1).match(pattern);

            if (!matchNoArgs1) {
              console.log('❌ `node index.js` (esecuzione 1): il pattern non è stato trovato');
              process.exit(1);
            }

            console.log('✔️ `node index.js` (esecuzione 1): pattern trovato');

            const [, , hexCodeNoArgs1] = matchNoArgs1;

            const { stdout: stdoutNoArgs2 } = await execAsync('node index.js');
            const match2 = stripAnsi(stdoutNoArgs2).match(pattern);

            if (!match2) {
              console.log('❌ `node index.js` (esecuzione 2): il pattern non è stato trovato');
              process.exit(1);
            }

            console.log('✔️ `node index.js` (esecuzione 2): pattern trovato');

            const [, , hexCodeNoArgs2] = match2;

            const { stdout: stdoutNoArgs3 } = await execAsync('node index.js');
            const match3 = stripAnsi(stdoutNoArgs3).match(pattern);

            if (!match3) {
              console.log('❌ `node index.js` (esecuzione 3): il pattern non è stato trovato');
              process.exit(1);
            }

            console.log('✔️ `node index.js` (esecuzione 3): pattern trovato');

            const [, , hexCodeNoArgs3] = match3;

            if (hexCodeNoArgs1 === hexCodeNoArgs2 && hexCodeNoArgs2 === hexCodeNoArgs3) {
              console.log(
                `❌ \`node index.js\` (tutte le 3 esecuzioni): il codice esadecimale era lo stesso: ${hexCodeNoArgs1}`,
              );
              process.exit(1);
            }

            console.log(
              `✔️ \`node index.js\` (tutte le 3 esecuzioni): il codice esadecimale era diverso: ${hexCodeNoArgs1}, ${hexCodeNoArgs2}, ${hexCodeNoArgs3}`,
            );

          function hexCodeLikeColor(hexCode, color) {
            const r = parseInt(hexCode.slice(1, 3), 16);
            const g = parseInt(hexCode.slice(3, 5), 16);
            const b = parseInt(hexCode.slice(5, 7), 16);
            if (color === 'red') return r >= Math.max(g, b);
            const luminosity = 0.2126 * r + 0.7152 * g + 0.0722 * b; // #ffffff è 255
            return (
              b >=
                Math.max(
                  r,
                  // Regola il verde per i turchesi
                  g - 10,
                ) && luminosity <= 128
            ); // blu scuro
          }

          for (let attempt = 0; attempt < 3; attempt++) {
            const { stdout: stdoutRed } = await execAsync('node index.js red');

            const matchRed = stripAnsi(stdoutRed).match(pattern);

            if (!matchRed) {
              console.log(`❌ \`node index.js red\` (esecuzione ${attempt + 1}): il pattern non è stato trovato`);
              process.exit(1);
            }

            console.log(`✔️ \`node index.js red\` (esecuzione ${attempt + 1}): pattern trovato`);

            const [, , hexCodeRed] = matchRed;

            if (!hexCodeLikeColor(hexCodeRed, 'red')) {
              console.log(
                `❌ \`node index.js red\` (esecuzione ${attempt + 1}): il codice esadecimale ${hexCodeRed} non è rosso`,
              );
              process.exit(1);
            }

            console.log(`✔️ \`node index.js red\` (esecuzione ${attempt + 1}): il codice esadecimale ${hexCodeRed} è rosso`);

            const { stdout: stdoutBlueDark } = await execAsync('node index.js blue dark');

            const matchBlueDark = stripAnsi(stdoutBlueDark).match(pattern);

            if (!matchBlueDark) {
              console.log(`❌ \`node index.js blue dark\` (esecuzione ${attempt + 1}): il pattern non è stato trovato`);
              process.exit(1);
            }

            console.log(`✔️ \`node index.js blue dark\` (esecuzione ${attempt + 1}): pattern trovato`);

            const [, , hexCodeBlueDark] = matchBlueDark;

            if (!hexCodeLikeColor(hexCodeBlueDark, 'blue')) {
              console.log(
                `❌ \`node index.js blue dark\` (esecuzione ${attempt + 1}): il codice esadecimale ${hexCodeBlueDark} non è blu scuro`,
              );
              process.exit(1);
            }

            console.log(
              `✔️ \`node index.js blue dark\` (esecuzione ${attempt + 1}): il codice esadecimale ${hexCodeBlueDark} è blu scuro`,
            );
          }

            console.log('✔️ Tutti i test sono passati');
          END_SCRIPT
      - name: Esegui il file di test
        run: node test.js
